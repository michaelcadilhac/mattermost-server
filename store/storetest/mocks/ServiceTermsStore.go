// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/mattermost/mattermost-server/model"
import store "github.com/mattermost/mattermost-server/store"

// ServiceTermsStore is an autogenerated mock type for the ServiceTermsStore type
type ServiceTermsStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: id, allowFromCache
func (_m *ServiceTermsStore) Get(id string, allowFromCache bool) store.StoreChannel {
	ret := _m.Called(id, allowFromCache)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string, bool) store.StoreChannel); ok {
		r0 = rf(id, allowFromCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// GetLatest provides a mock function with given fields: allowFromCache
func (_m *ServiceTermsStore) GetLatest(allowFromCache bool) store.StoreChannel {
	ret := _m.Called(allowFromCache)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(bool) store.StoreChannel); ok {
		r0 = rf(allowFromCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// Save provides a mock function with given fields: serviceTerms
func (_m *ServiceTermsStore) Save(serviceTerms *model.ServiceTerms) store.StoreChannel {
	ret := _m.Called(serviceTerms)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.ServiceTerms) store.StoreChannel); ok {
		r0 = rf(serviceTerms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}
